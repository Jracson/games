import pygame
import sys

# Initialize pygame
pygame.init()

# Set up the screen
WIDTH, HEIGHT = 600, 400
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Breakout")

# Colors
WHITE = (255, 255, 255)
BLUE = (0, 0, 255)
RED = (255, 0, 0)

# Define the paddle
PADDLE_WIDTH, PADDLE_HEIGHT = 100, 20
paddle = pygame.Rect(WIDTH // 2 - PADDLE_WIDTH // 2, HEIGHT - 50, PADDLE_WIDTH, PADDLE_HEIGHT)

# Define the ball
BALL_RADIUS = 10
ball = pygame.Rect(WIDTH // 2 - BALL_RADIUS, HEIGHT // 2 - BALL_RADIUS, BALL_RADIUS * 2, BALL_RADIUS * 2)
ball_speed_x = 5
ball_speed_y = -5

# Define the blocks
BLOCK_WIDTH, BLOCK_HEIGHT = 60, 20
blocks = []
for row in range(5):
    for col in range(10):
        block = pygame.Rect(50 + col * (BLOCK_WIDTH + 10), 50 + row * (BLOCK_HEIGHT + 10), BLOCK_WIDTH, BLOCK_HEIGHT)
        blocks.append(block)

# Game loop
clock = pygame.time.Clock()

while True:
    screen.fill(WHITE)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # Move the paddle
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and paddle.left > 0:
        paddle.left -= 5
    if keys[pygame.K_RIGHT] and paddle.right < WIDTH:
        paddle.right += 5

    # Move the ball
    ball.x += ball_speed_x
    ball.y += ball_speed_y

    # Check for collisions with walls
    if ball.left <= 0 or ball.right >= WIDTH:
        ball_speed_x *= -1
    if ball.top <= 0:
        ball_speed_y *= -1

    # Check for collision with paddle
    if ball.colliderect(paddle):
        ball_speed_y *= -1

    # Check for collision with blocks
    for block in blocks[:]:
        if ball.colliderect(block):
            blocks.remove(block)
            ball_speed_y *= -1

    # Draw everything
    pygame.draw.rect(screen, BLUE, paddle)
    pygame.draw.circle(screen, RED, ball.center, ball.width // 2)
    for block in blocks:
        pygame.draw.rect(screen, BLUE, block)

    pygame.display.flip()
    clock.tick(60)
